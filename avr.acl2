(defconst *empty-cpu* '((:cycle . 0) (:pc . 0)))

(defun data-key (index)
  (cons :data index))

(defun set-data (cpu index value)
  (put-assoc-equal (data-key index) value cpu))

(defun set-reg (cpu reg value)
  (set-data cpu reg value))

(defun u8p (x)
  (and (integerp x)
       (<= 0 x)
       (< x 256)))

(defun u8-fix (x)
  (if (u8p x)
      x
    0))

(defun get-reg (cpu reg)
  (u8-fix (cdr (assoc (data-key reg) cpu))))

(defun prog-key (word-index)
  (cons :prog word-index))

; address indexes a 16-bit word, not a byte
(defun get-prog (cpu word-index)
  (cdr (assoc (prog-key word-index) cpu)))

(defun set-prog (cpu word-index value)
  (put-assoc-equal (prog-key word-index) value cpu))

(defun get-pc (cpu)
  (cdr (assoc :pc cpu)))

(defun get-cycle (cpu)
  (cdr (assoc :cycle cpu)))

(defun advance-cycle (cpu amt)
  (put-assoc-equal :cycle (+ amt (get-cycle cpu)) cpu))

(defun pc-cycle-increment (cpu)
  (put-assoc-equal :pc (1+ (get-pc cpu))
	(advance-cycle cpu 1)))



(defun exec-ldi (cpu dest-reg immediate)
  (pc-cycle-increment (set-reg cpu dest-reg immediate)))

(defun u8+ (x y)
  (logand (+ x y) 255))

(defun u8-xor (x y)
  (logxor x y))

(defun u8-and (x y)
  (u8-fix (logand x y)))

(defthm u8p-u8-and
  (u8p (u8-and x y))
  :rule-classes (:type-prescription))


(defun u8-neg (x)
  (u8-fix (logand (- x) #xFF)))

(defthm u8p-u8-neg
  (u8p (u8-neg x))
  :rule-classes (:type-prescription))

; TODO: Flags
(defun exec-add (cpu dest-reg src-reg)
  (pc-cycle-increment (set-reg cpu 
			       dest-reg
			       (u8+ (get-reg cpu dest-reg)
				    (get-reg cpu src-reg)))))

; TODO: Flags
(defun exec-eor (cpu dest-reg src-reg)
  (pc-cycle-increment (set-reg cpu
			       dest-reg
			       (u8-xor (get-reg cpu dest-reg)
				       (get-reg cpu src-reg)))))

(defun exec-neg (cpu reg)
  (pc-cycle-increment (set-reg cpu reg (u8-neg (get-reg cpu reg)))))

(defun exec-mov (cpu dest-reg src-reg)
  (pc-cycle-increment (set-reg cpu dest-reg (get-reg cpu src-reg))))

(defun exec-andi (cpu reg immediate)
  (pc-cycle-increment (set-reg cpu reg (u8-and (get-reg cpu reg) immediate))))

(defun exec-and (cpu dest-reg src-reg)
  (pc-cycle-increment (set-reg cpu 
			       dest-reg 
			       (u8-and (get-reg cpu dest-reg)
				       (get-reg cpu src-reg)))))

(defun current-instruction (cpu)
  (get-prog cpu (get-pc cpu)))

(defun decode-high-dest-reg (instruction)
  (+ 16 (ash (logand instruction #x00F0) -4)))

(defun decode-immediate-16 (instruction)
  (logior (logand instruction #x000F)
	  (ash (logand instruction #x0F00) -4)))

(defun opcode-4 (instruction)
  (logand instruction #xF000))

(defun opcode-6 (instruction)
  (logand instruction #xFC00))

(defun opcode-11 (instruction)
  (logand instruction #xFE0F))

(defun decode-dest-reg (instruction)
  (ash (logand instruction #x01F0) -4))

(defun decode-src-reg (instruction)
  (logior (logand instruction #x000F)
	  (ash (logand instruction #x0200) -5)))

(defun cpu-step (cpu)
  (let ((instruction (current-instruction cpu)))
    (cond ((equal (opcode-4 instruction) #xE000) 
	   (exec-ldi cpu (decode-high-dest-reg instruction) (decode-immediate-16 instruction)))
	  ((equal (opcode-6 instruction) #x0C00)
	   (exec-add cpu (decode-dest-reg instruction) (decode-src-reg instruction)))
	  ((equal (opcode-6 instruction) #x2400)
	   (exec-eor cpu (decode-dest-reg instruction) (decode-src-reg instruction)))
	  ((equal (opcode-6 instruction) #x2C00)
	   (exec-mov cpu (decode-dest-reg instruction) (decode-src-reg instruction)))
	  ((equal (opcode-4 instruction) #x7000)
	   (exec-andi cpu (decode-high-dest-reg instruction) (decode-immediate-16 instruction)))
	  ((equal (opcode-6 instruction) #x2000)
	   (exec-and cpu (decode-dest-reg instruction) (decode-src-reg instruction)))
	  ((equal (opcode-11 instruction) #x9401)
	   (exec-neg cpu (decode-dest-reg instruction))
	  ))))


(defun cpu-n-step (n cpu)
  (if (zp n)
      cpu
    (cpu-n-step (- n 1) (cpu-step cpu))))
	   
(defun write-prog-words (cpu words idx)
  (if (endp words)
      cpu
    (set-prog (write-prog-words cpu (rest words) (1+ idx))
	      idx
	      (first words))))

(defun ldi-ldi-prog () '(#xE0A0 #xE0B1 #x0FAB #x0FAB #x27AB))

(defun u8-cases (n)
  (if (zp n)
      nil
    (cons `(equal x ,(- n 1))
	  (u8-cases (- n 1)))))

(defmacro defthm-by-u8-cases (name body &rest args)
  `(defthm ,name
     ,body
     ,@args
     :hints (("Goal"
	      :cases ,(u8-cases 256)))))
	

;(defthm-by-u8-cases u8-and-1-is-mod
;  (implies (u8p x)
;	   (equal (u8-and x 1)
;		  (mod x 2))))
	    
(defthm-by-u8-cases u8-xor-0
  (implies (u8p x)
	   (equal (u8-xor x x)
		  0)))

(defthm assoc-equal-ignores-other-put-assoc
  (implies (not (equal a b))
	   (equal (assoc-equal a (put-assoc-equal b x ds))
		  (assoc-equal a ds))))

(defthm assoc-equal-sees-own-put-assoc
  (equal (cdr (assoc-equal k (put-assoc-equal k x d)))
	 x))

(defthm get-reg-pc-cycle-increment
  (equal (get-reg (pc-cycle-increment cpu) r)
	 (get-reg cpu r)))

(defthm get-reg-set-reg-join
  (implies (u8p x)
	   (equal (get-reg (set-reg cpu r x) r)
		  x)))

(defthm current-instruction-over-pc-cycle-increment
  (equal (get-pc (pc-cycle-increment pc-cpu))
	 (1+ (get-pc pc-cpu))))


(defthm get-prog-over-pc-cycle-increment
  (equal (get-prog (pc-cycle-increment c) r)
	 (get-prog c r)))

(defthm get-pc-ignores-set-reg
  (equal (get-pc (set-reg cpu r x))
	 (get-pc cpu)))

(defthm get-prog-ignores-set-reg
  (equal (get-prog (set-reg cpu r x) idx)
	 (get-prog cpu idx)))

(defthm get-reg-ignores-different-set-reg
  (implies (not (equal a b))
	   (equal (get-reg (set-reg cpu a x) b)
		  (get-reg cpu b))))

(defconst *mul-8-8-prog* 
  (list #x2422 #x2433 #x2466 #xE017 #x2D04 #x7001 #x9501
	#x2C85 ; MOV R8, R5
	#x2280 ; AND R8, R16 -- apply the mask
	   
	   ))



(defun has-prog-mems (words cpu address)
  (if (endp words)
      t
    (and (equal (get-prog cpu address) (first words))
	 (has-prog-mems (rest words) cpu (1+ address)))))


;(defmacro u8p (x)
;  (and (natp x)
;       (< x 256)))

(defthm get-reg-u8p
  (u8p (get-reg cpu r))
  :rule-classes (:type-prescription))

;(defthm-by-u8-cases mod-2-u8p
;  (implies (u8p x)
;	   (u8p (mod x 2)))
;  :rule-classes (:type-prescription))

(defthm-by-u8-cases hmm
  (implies (and (u8p x)
		)
	   (equal (u8-neg (u8-and x 1))
		  (if (evenp x) 0 255))))
(defthm-by-u8-cases u8-and-0
  (equal (u8-and x 0)
	 0))
(defthm-by-u8-cases 0-and-u8
  (equal (u8-and 0 x)
	 0))
(defthm-by-u8-cases u8-and-ff
  (implies (u8p x)
	   (equal (u8-and x #xFF)
		  x)))
(defthm-by-u8-cases ff-and-u8
  (implies (u8p x)
	   (equal (u8-and #xFF x)
		  x)))

(defthm hmm2
  (implies (and (u8p x)
		(u8p y))
	   (equal (u8-and y (u8-neg (u8-and x 1)))
		  (if (evenp x) 0 y)))
  :hints (("Goal" :in-theory (disable u8p u8-and u8-neg))))
	   
(defthm reloc-mul-8-8-prelude
  (implies (and (has-prog-mems *mul-8-8-prog* cpu (get-pc cpu))
		)
	   (and
	    (equal (get-reg (cpu-n-step 9 cpu) 16)
		   (u8-neg (u8-and (get-reg cpu 4) 1) )
		   )
	    (equal (get-reg (cpu-n-step 9 cpu) 8)
		   (if (evenp (get-reg cpu 4))
		       0
		     (get-reg cpu 5)))
	    (equal (get-reg (cpu-n-step 9 cpu) 17) 7))
	    )
  :hints (("Goal" 
	   :in-theory (disable get-reg get-prog u8p set-prog get-pc 
			       mod set-reg u8-xor u8-and u8-neg
			       pc-cycle-increment)
	   :expand (:free (n c) (cpu-n-step n c)))))

(cpu-n-step 4 (write-prog-words *empty-cpu* (ldi-ldi-prog) 0)))

(include-book "foo" :dir :system)
