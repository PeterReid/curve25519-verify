(include-book "u8")

(defconst *empty-cpu* '((:cycle . 0) (:pc . 0)))

(defun cpu-ops-fn (cpu ops)
  (if (endp ops)
      cpu
    (cpu-ops-fn (subst cpu '_ (first ops)) (rest ops))))

(defmacro cpu-ops (&rest ops)
  (cpu-ops-fn 'cpu ops))

(defun data-key (index)
  (cons :data index))

(defun set-data (cpu index value)
  (put-assoc-equal (data-key index) value cpu))

(defun set-reg (cpu reg value)
  (set-data cpu reg value))

(defun get-reg (cpu reg)
  (u8-fix (cdr (assoc (data-key reg) cpu))))

(defun prog-key (word-index)
  (cons :prog word-index))

; address indexes a 16-bit word, not a byte
(defun get-prog (cpu word-index)
  (cdr (assoc (prog-key word-index) cpu)))

(defun set-prog (cpu word-index value)
  (put-assoc-equal (prog-key word-index) value cpu))

(defun get-pc (cpu)
  (cdr (assoc :pc cpu)))

(defun get-cycle (cpu)
  (cdr (assoc :cycle cpu)))

(defun advance-cycle (cpu amt)
  (put-assoc-equal :cycle (+ amt (get-cycle cpu)) cpu))

(defun set-pc (cpu pc)
  (put-assoc-equal :pc pc cpu))


(defun pc-multicycle (cpu cycle-count)
  (let ((initial-pc (get-pc cpu)))
    (cpu-ops
     (advance-cycle _ cycle-count)
     (set-pc _ (+ 1 initial-pc)))))

(defun pc-cycle-increment (cpu)
  (pc-multicycle cpu 1))

(defun exec-ldi (cpu dest-reg immediate)
  (pc-cycle-increment (set-reg cpu dest-reg immediate)))


(defconst *status-reg* #x5F)
(defconst *carry-bit* 0)
(defconst *zero-flag* 1)
(defconst *negative-flag* 2)
(defconst *overflow-flag* 3)
(defconst *sign-flag* 4)
(defconst *half-carry-flag* 5)
(defconst *transfer-flag* 6)
(defconst *interrupt-flag* 7)



; TODO: Flags
(defun exec-add (cpu dest-reg src-reg)
  (pc-cycle-increment 
   (set-reg 
    (set-reg cpu 
	     dest-reg
	     (u8+ (get-reg cpu dest-reg)
		  (get-reg cpu src-reg)))
    *status-reg*
    (u8-set-bit (get-reg cpu *status-reg*)
		*carry-bit*
		(u8+-carry-bit (get-reg cpu dest-reg)
			       (get-reg cpu src-reg)))
    )))


(defun get-carry-bit (cpu)
  (u8-get-bit (get-reg cpu *status-reg*)*carry-bit*))

(defun exec-adc (cpu dest-reg src-reg)
  (let* ((a (get-reg cpu dest-reg))
	 (b (get-reg cpu src-reg))
	 (c-in (get-carry-bit cpu))
	 (initial-status (get-reg cpu *status-reg*)))
    (cpu-ops
     (set-reg _ dest-reg (u8-carried-+ a b c-in))
     (set-reg _ *status-reg* 
	      (u8-set-bit initial-status *carry-bit* (u8-carried-+-carry-bit a b c-in)))
     (pc-cycle-increment _)
     )))
  
; TODO: Flags
(defun exec-eor (cpu dest-reg src-reg)
  (pc-cycle-increment (set-reg cpu
			       dest-reg
			       (u8-xor (get-reg cpu dest-reg)
				       (get-reg cpu src-reg)))))

(defun exec-neg (cpu reg)
  (pc-cycle-increment (set-reg cpu reg (u8-neg (get-reg cpu reg)))))

(defun exec-mov (cpu dest-reg src-reg)
  (pc-cycle-increment (set-reg cpu dest-reg (get-reg cpu src-reg))))

(defun exec-andi (cpu reg immediate)
  (pc-cycle-increment (set-reg cpu reg (u8-and (get-reg cpu reg) immediate))))

(defun exec-and (cpu dest-reg src-reg)
  (pc-cycle-increment (set-reg cpu 
			       dest-reg 
			       (u8-and (get-reg cpu dest-reg)
				       (get-reg cpu src-reg)))))
(defun exec-clc (cpu)
  (pc-cycle-increment (set-reg cpu *status-reg*
			       (u8-set-bit (get-reg cpu *status-reg*)
					   *carry-bit*
					   nil))))


(defun get-doublereg (cpu reg)
  (+ (get-reg cpu reg)
     (* 256 (get-reg cpu (1+ reg)))))

(defun set-doublereg (cpu reg value)
  (cpu-ops
   (set-reg _ reg (mod value 256))
   (set-reg _ (1+ reg) (mod (floor value 256) 256))))

(defun exec-ld (cpu dest-reg address-reg increment)
  (if (and (not (zip increment))
	   (or (equal dest-reg address-reg)
	       (equal dest-reg (1+ address-reg))))
      :undefined-ld
    (let* ((current-address (get-doublereg cpu address-reg))
	   (updated-address (+ increment current-address))
	   (loaded-value (get-reg cpu current-address)))
      (cpu-ops
       (set-reg _ dest-reg loaded-value)
       (set-doublereg _ address-reg updated-address)
       (pc-multicycle _ 2)))))
	   
(defun exec-st (cpu source-reg address-reg increment)
  (if (and (not (zip increment))
	   (or (equal source-reg address-reg)
	       (equal source-reg (1+ address-reg))))
      :undefined-st
    (let* ((current-address (get-doublereg cpu address-reg))
	   (updated-address (+ increment current-address))
	   (value-to-store (get-reg cpu source-reg)))
      (cpu-ops
       (set-reg _ current-address value-to-store)
       (set-doublereg _ address-reg updated-address)
       (pc-multicycle _ 2)))))

(defun u8-dec (x) (mod (- (u8-fix x) 1) 255))
(defun u8-dec-overflow-flag (x) (equal x #x80))
(defun u8-dec-negative-flag (x) (<= 128 (u8-dec x)))
(defun u8-dec-sign-flag (x) (not (equal (u8-dec-overflow-flag x) (u8-dec-negative-flag x))))
(defun u8-dec-zero-flag (x) (equal (u8-dec x) 0))

(defun set-bits-fn (args initial)
  (if (endp args)
      initial
    (set-bits-fn (rest (rest args))
		 `(u8-set-bit ,initial ,(first args) ,(second args)))))
(defmacro set-bits (initial &rest args)
  (set-bits-fn args initial))

(defun exec-dec (cpu reg)
  (let* ((current-value (get-reg cpu reg))
	 (current-status (get-reg cpu *status-reg*)))
    (cpu-ops
     (set-reg _ reg (u8-dec current-value))
     (set-reg _ *status-reg*
	      (set-bits current-status
			*sign-flag* (u8-dec-sign-flag current-value)
			*overflow-flag* (u8-dec-overflow-flag current-value)
			*negative-flag* (u8-dec-negative-flag current-value)
			*zero-flag* (u8-dec-zero-flag current-value)))
     (pc-cycle-increment _))))
	      
(defun exec-brpl (cpu offset)
  (let* ((current-pc (get-pc cpu))
	 (current-status (get-reg cpu *status-reg*))
	 (negative-bit (u8-get-bit current-status *negative-flag*)))
    (cpu-ops
     (set-pc _ (+ current-pc
		  (if negative-bit 1 (+ 1 offset))))
     (advance-cycle _ (if negative-bit 1 2)))))

(defun current-instruction (cpu)
  (get-prog cpu (get-pc cpu)))

(defun decode-high-dest-reg (instruction)
  (+ 16 (ash (logand instruction #x00F0) -4)))

(defun decode-immediate-16 (instruction)
  (logior (logand instruction #x000F)
	  (ash (logand instruction #x0F00) -4)))

(defun opcode-4 (instruction)
  (logand instruction #xF000))

(defun opcode-6 (instruction)
  (logand instruction #xFC00))

(defun opcode-11 (instruction)
  (logand instruction #xFE0F))

(defun decode-dest-reg (instruction)
  (ash (logand instruction #x01F0) -4))

(defun decode-src-reg (instruction)
  (logior (logand instruction #x000F)
	  (ash (logand instruction #x0200) -5)))

(defun branch-opcode (instruction)
  (logand instruction #xFC07))

(defun decode-branch-offset (instruction)
  (+ (ash (logand instruction #x01F8) -3)
     (if (equal (logand instruction #x0100) 0)
	 0
       -64)))

(defun cpu-step (cpu)
  (let ((instruction (current-instruction cpu)))
    (cond ((equal (opcode-4 instruction) #xE000) 
	   (exec-ldi cpu (decode-high-dest-reg instruction) (decode-immediate-16 instruction)))
	  ((equal (opcode-6 instruction) #x0C00)
	   (exec-add cpu (decode-dest-reg instruction) (decode-src-reg instruction)))
	  ((equal (opcode-6 instruction) #x1C00)
	   (exec-adc cpu (decode-dest-reg instruction) (decode-src-reg instruction)))
	  ((equal (opcode-6 instruction) #x2400)
	   (exec-eor cpu (decode-dest-reg instruction) (decode-src-reg instruction)))
	  ((equal (opcode-6 instruction) #x2C00)
	   (exec-mov cpu (decode-dest-reg instruction) (decode-src-reg instruction)))
	  ((equal (opcode-4 instruction) #x7000)
	   (exec-andi cpu (decode-high-dest-reg instruction) (decode-immediate-16 instruction)))
	  ((equal (opcode-6 instruction) #x2000)
	   (exec-and cpu (decode-dest-reg instruction) (decode-src-reg instruction)))
	  ((equal (opcode-11 instruction) #x9401)
	   (exec-neg cpu (decode-dest-reg instruction)))
	  ((equal instruction #x9488)
	   (exec-clc cpu))
	  ((equal (opcode-11 instruction) #x900d) ; LD _, X+
	   (exec-ld cpu (decode-dest-reg instruction) 26 1))
	  ((equal (opcode-11 instruction) #x9009) ; LD _, Y+
	   (exec-ld cpu (decode-dest-reg instruction) 28 1))
	  ((equal (opcode-11 instruction) #x9201) ; ST Z+, _
	   (exec-st cpu (decode-dest-reg instruction) 30 1))
	  ((equal (opcode-11 instruction) #x940a) ; DEC
	   (exec-dec cpu (decode-dest-reg instruction)))
	  ((equal (branch-opcode instruction) #xF402) ; BRPL
	   (exec-brpl cpu (decode-branch-offset instruction)))
	  )))


(defun cpu-n-step (n cpu)
  (if (zp n)
      cpu
    (cpu-n-step (- n 1) (cpu-step cpu))))
	   
(defun write-prog-words (cpu words idx)
  (if (endp words)
      cpu
    (set-prog (write-prog-words cpu (rest words) (1+ idx))
	      idx
	      (first words))))

(defun ldi-ldi-prog () '(#xE0A0 #xE0B1 #x0FAB #x0FAB #x27AB))
  
(defthm-by-u8-cases u8-xor-0
  (implies (u8p x)
	   (equal (u8-xor x x)
		  0)))

(defthm assoc-equal-ignores-other-put-assoc
  (implies (not (equal a b))
	   (equal (assoc-equal a (put-assoc-equal b x ds))
		  (assoc-equal a ds))))

(defthm assoc-equal-sees-own-put-assoc
  (equal (cdr (assoc-equal k (put-assoc-equal k x d)))
	 x))

(defthm get-reg-pc-cycle-increment
  (equal (get-reg (pc-cycle-increment cpu) r)
	 (get-reg cpu r)))

(defthm get-reg-ignores-pc-multicycle
  (equal (get-reg (pc-multicycle cpu n) r)
	 (get-reg cpu r)))

(defthm get-pc-of-multicycle
  (equal (get-pc (pc-multicycle cpu n))
	 (+ 1 (get-pc cpu)))))

(defthm get-reg-of-advance-cycle
  (equal (get-reg (advance-cycle cpu n) r)
	 (get-reg cpu r)))

(defthm get-reg-of-set-pc
  (equal (get-reg (set-pc cpu new-pc) r)
	 (get-reg cpu r)))

(defthm get-reg-set-reg-join
  (implies (u8p x)
	   (equal (get-reg (set-reg cpu r x) r)
		  x)))

(defthm get-doublereg-ignores-pc-cycle-increment
  (equal (get-doublereg (pc-cycle-increment cpu) r)
	 (get-doublereg cpu r))
  :hints (("Goal" :in-theory (disable get-reg pc-multicycle))))

(defthm get-doublereg-ignores-pc-multicycle
  (equal (get-doublereg (pc-multicycle cpu n) r)
	 (get-doublereg cpu r))
  :hints (("Goal" :in-theory (disable get-reg pc-multicycle))))

(defthm current-instruction-over-pc-cycle-increment
  (equal (get-pc (pc-cycle-increment pc-cpu))
	 (1+ (get-pc pc-cpu))))


(defthm get-prog-over-pc-cycle-increment
  (equal (get-prog (pc-cycle-increment c) r)
	 (get-prog c r)))

(defthm get-prog-over-pc-multicycle
  (equal (get-prog (pc-multicycle cpu n) a)
	 (get-prog cpu a)))

(defthm get-pc-ignores-set-reg
  (equal (get-pc (set-reg cpu r x))
	 (get-pc cpu)))

(defthm get-pc-ignores-set-doublereg
  (equal (get-pc (set-doublereg cpu r x))
	 (get-pc cpu)))

(defthm get-prog-ignores-set-reg
  (equal (get-prog (set-reg cpu r x) idx)
	 (get-prog cpu idx)))

(defthm get-prog-ignores-set-doublereg
  (equal (get-prog (set-doublereg cpu r x) idx)
	 (get-prog cpu idx)))

(defthm get-reg-ignores-different-set-reg
  (implies (not (equal a b))
	   (equal (get-reg (set-reg cpu a x) b)
		  (get-reg cpu b))))

(defthm reg-reg-ignores-different-set-doublereg
  (implies (and (not (equal a b))
		(not (equal (+ 1 a) b)))
	   (equal (get-reg (set-doublereg cpu a x) b)
		  (get-reg cpu b)))
  :hints (("Goal" :in-theory (disable get-reg set-reg))))


(defthm get-doublereg-ignores-different-set-reg
  (implies (and (not (equal a b))
		(not (equal a (1+ b))))
	   (equal (get-doublereg (set-reg cpu a x) b)
		  (get-doublereg cpu b))))
(defthm get-doublereg-ignores-different-set-doublereg
  (implies (and (natp a)
		(natp b)
		(not (equal a b))
		(not (equal a (1+ b)))
		(not (equal (1+ a) b)))
	   (equal (get-doublereg (set-doublereg cpu a x) b)
		  (get-doublereg cpu b)))
  :hints (("Goal" :in-theory (disable set-reg get-reg))))
		     
(defthm get-pc-ignores-advance-cycle
  (equal (get-pc (advance-cycle cpu n))
	 (get-pc cpu)))

(defthm get-pc-set-pc-collapse
  (equal (get-pc (set-pc cpu c))
	 c))

(defconst *mul-8-8-prog* 
  (list #x2422 #x2433 #x2466 #xE017 #x2D04 #x7001 #x9501
	#x2C85 ; MOV R8, R5
	#x2280 ; AND R8, R16 -- apply the mask
	#x0C28
	#x2C86
	#x2280
	   ))



(defun has-prog-mems (words cpu address)
  (if (endp words)
      t
    (and (equal (get-prog cpu address) (first words))
	 (has-prog-mems (rest words) cpu (1+ address)))))


;(defmacro u8p (x)
;  (and (natp x)
;       (< x 256)))

(defthm get-reg-u8p
  (u8p (get-reg cpu r))
  :rule-classes (:type-prescription))

;(defthm-by-u8-cases mod-2-u8p
;  (implies (u8p x)
;	   (u8p (mod x 2)))
;  :rule-classes (:type-prescription))

(defthm-by-u8-cases hmm
  (implies (and (u8p x)
		)
	   (equal (u8-neg (u8-and x 1))
		  (if (evenp x) 0 255))))


; TODO: This may not be necessary
(defthm hmm2
  (implies (and (u8p x)
		(u8p y))
	   (equal (u8-and y (u8-neg (u8-and x 1)))
		  (if (evenp x) 0 y)))
  :hints (("Goal" :in-theory (disable u8p u8-and u8-neg))))
	   
(defthm reloc-mul-8-8-prelude
  (implies (and (has-prog-mems *mul-8-8-prog* cpu (get-pc cpu))
		)
	   (and
	;    (equal (get-reg (cpu-n-step 9 cpu) 16)
	;	   (u8-neg (u8-and (get-reg cpu 4) 1) )
	;	   )
	    ;(equal (get-reg (cpu-n-step 10 cpu) 8)
	;	   (if (evenp (get-reg cpu 4))
	;	       0
	;	     (get-reg cpu 5)))

	    (equal (get-reg (cpu-n-step 12 cpu) 2)
		   (u8+ 
		    0
		    (if (evenp (get-reg cpu 4))
			0
		      (get-reg cpu 5))))


	 ;   (equal (get-reg (cpu-n-step 9 cpu) 17) 7))
	    ))
  :hints (("Goal" 
	   :in-theory (disable get-reg get-prog u8p set-prog get-pc 
			       mod set-reg u8-xor u8+ u8+-carry-bit u8-and u8-neg
			       pc-cycle-increment)
	   :expand (:free (n c) (cpu-n-step n c)))))

(defconst *add-32* (list
  #xe10f ; LDI R16,31
  #x9488 ; CLC
  #x902d ; LD R2,X+
  #x9039 ; LD R3,Y+
  #x1c23 ; ADC R2,R3
  #x9221 ; ST Z+,R2
  #x950a ; DEC R16
  #xf7d2 ; BRPL ADD_32_TO_32_TOP
  #x9790 ; SBIW R26,32
  #x97a0 ; SBIW R28,32
  #x97b0 ; SBIW R30,32
  #x9508 ; RET
  ))

(defun read-le-bytes (n cpu addr)
  (if (zp n)
      0
    (+ (get-reg cpu addr)
       (* 256 (read-le-bytes (- n 1) cpu (+ addr 1))))))

;(defthm u8-set-bit-u8p
;  (u8p (u8-set-bit byte bit val))
 ; :rule-classes (:type-prescription))
(defthm u8-carried-+-u8p
  (u8p (u8-carried-+ a b c))
  :rule-classes (:type-prescription))


(defthm u8-setp-bit-u8p
  ;(implies (and (natp b)
;		(< b 8))
	   (u8p (u8-set-bit byte b x)))
  :hints (("Goal" :in-theory (disable u8-from-bits u8p)
	   :use (:instance u8-from-8-bits-u8p
			   (xs (update-nth b x (u8-to-n-bits 8 byte))))))
  :rule-classes (:type-prescription))


(in-theory (disable get-reg get-prog u8p set-prog get-pc 
			       mod set-reg u8-xor u8+ u8+-carry-bit 
			       u8-and u8-neg u8-set-bit
			       u8-dec
			       u8-carried-+
			       u8-carried-+-carry-bit
			       u8-dec-sign-flag u8-dec-negative-flag
			       u8-dec-overflow-flag u8-dec-zero-flag
			       set-doublereg get-doublereg
			       pc-multicycle
			       advance-cycle
			       set-pc
			       pc-cycle-increment))

(DEFTHM add-32-pc-progress
  (implies (and (has-prog-mems *add-32* cpu (get-pc cpu))
		(<= 96 (get-doublereg cpu 26))
		(<= 96 (get-doublereg cpu 28))
		(<= 96 (get-doublereg cpu 30))
		;(natp (get-pc cpu))
		)
	   (equal 
	    ;(get-reg (cpu-n-step 5 cpu) 16)
	    ;31

	    ;(get-reg (cpu-n-step 4 cpu)
	;	     2)
	    ;42

	    ;(get-reg (cpu-n-step 5 cpu) 2)
	    ;(u8-carried-+
	    ; (get-reg cpu (get-doublereg cpu 26))
	    ; (get-reg cpu (get-doublereg cpu 28))
	    ; nil)
		
	    
	    ;(u8-get-bit (get-reg (cpu-n-step 7 cpu) *status-reg*) *negative-flag*)
	    ;nil
	    
	    (get-pc (cpu-n-step 8 cpu))
	    (+ 2 (get-pc cpu))

	    ;(get-pc (cpu-n-step 7 cpu))
	    ;(+ 7 (get-pc cpu))

	    ))

  :hints (("Goal" 
	   :in-theory (disable get-reg get-prog u8p set-prog get-pc 
			       mod set-reg u8-xor u8+ u8+-carry-bit 
			       u8-and u8-neg u8-set-bit
			       u8-dec
			       u8-carried-+
			       u8-carried-+-carry-bit
			       u8-dec-sign-flag u8-dec-negative-flag
			       u8-dec-overflow-flag u8-dec-zero-flag
			       set-doublereg get-doublereg
			       pc-multicycle
			       advance-cycle
			       set-pc
			       pc-cycle-increment)
	   :expand (:free (n c) (cpu-n-step n c)))))

(defun run-add32-loop (cpu)
  (cpu-n-step 6 cpu))

(defconst *add-32-inner-loop* (list
  #x902d ; LD R2,X+
  #x9039 ; LD R3,Y+
  #x1c23 ; ADC R2,R3
  #x9221 ; ST Z+,R2
  #x950a ; DEC R16
  #xf7d2 ; BRPL ADD_32_TO_32_TOP
  ))

(defthm add-32-inner-loop
  (implies (and (has-prog-mems *add-32-inner-loop* cpu (get-pc cpu))
		(<= 96 (get-doublereg cpu 26))
		(<= 96 (get-doublereg cpu 28))
		(<= 96 (get-doublereg cpu 30))	
		(< 0 (get-reg cpu 16))
		(<= (get-reg cpu 16) 128)
		(natp (get-pc cpu)))
	   (equal (get-pc (run-add32-loop cpu))
		  (get-pc cpu)))
  :hints (("Goal"
	   :in-theory (enable u8-dec-negative-flag u8-dec)
	   :expand (:free (n c) (cpu-n-step n c)))))

(defthm add-32-inner-loop-last
  (implies (and (has-prog-mems *add-32-inner-loop* cpu (get-pc cpu))
		(<= 96 (get-doublereg cpu 26))
		(<= 96 (get-doublereg cpu 28))
		(<= 96 (get-doublereg cpu 30))	
		(< 0 (get-reg cpu 16))
		(equal (get-reg cpu 16) 0)
		
		)
	   (equal (get-pc (run-add32-loop cpu))
		  (+ 6 (get-pc cpu))))
  :hints (("Goal"
	   :in-theory (enable u8-dec-negative-flag u8-dec)
	   :expand (:free (n c) (cpu-n-step n c)))))

(defun read-data (cpu addr len)
  (if (zp len)
      nil
    (cons (get-reg cpu addr)
	  (read-data cpu (1+ addr) (- len 1)))))

(defthm read-data-append
  (implies (and (natp len)
		(natp addr))
	   (equal (read-data cpu addr (+ 1 len))
		  (append (read-data cpu addr len)
			  (list (get-reg cpu (+ len addr)))))))

(defthm read-data-len
  (implies (natp len)
	   (equal (len (read-data cpu addr len))
		  len)))

(defun bytes-to-nat-le (bs)
  (if (endp bs)
      0
    (+ (first bs)
       (* 256 (bytes-to-nat-le (rest bs))))))

(defthm bytes-to-le-nat-append
  (equal (bytes-to-nat-le (append x y))
	 (+ (bytes-to-nat-le x)
	    (* (expt 256 (len x))
	       (bytes-to-nat-le y)))))

(defun read-le-nat (cpu addr len)
  (bytes-to-nat-le (read-data cpu addr len)))

(defthm z-reg-preserved
  (implies (and (has-prog-mems *add-32-inner-loop* cpu (get-pc cpu))
		(<= 96 (get-doublereg cpu 30))
		(natp read-spot) (<= 96 read-spot) 
		(< read-spot (get-doublereg cpu 30))
		)
	   (equal (get-reg (run-add32-loop cpu) read-spot)
		  (get-reg cpu read-spot)))
  :hints (("Goal"
	   :expand (:free (n c) (cpu-n-step n c)))))

(defthm z-mem-preserved
  (implies (and (has-prog-mems *add-32-inner-loop* cpu (get-pc cpu))
		(natp z-base) (<= 96 z-base)	
		(<= 96 (get-doublereg cpu 30))
		(<= 96 z-base)
		(natp iter)
		(<= (+ z-base iter) (get-doublereg cpu 30))
		)
	   (equal (read-data (run-add32-loop cpu) z-base iter)
		  (read-data cpu z-base iter)))
  :hints (("Goal"
	   :in-theory (disable run-add32-loop))))

(defthm add-32-inner-loop-written-reg
  (implies (and (has-prog-mems *add-32-inner-loop* cpu (get-pc cpu))
		(<= 96 (get-doublereg cpu 26))	
		(<= 96 (get-doublereg cpu 28))	
		(<= 96 (get-doublereg cpu 30)))
	   (equal
	    (get-reg (run-add32-loop cpu) (get-doublereg cpu 30))
	    (u8-carried-+ 
	     (get-reg cpu (get-doublereg cpu 26))
	     (get-reg cpu (get-doublereg cpu 28))
	     (get-carry-bit cpu))))
  :hints (("Goal"
	   :expand (:free (n c) (cpu-n-step n c)))))

(defthm add-32-inner-loop-carry-bit
  (implies (and (has-prog-mems *add-32-inner-loop* cpu (get-pc cpu))
		(<= 96 (get-doublereg cpu 26))	
		(<= 96 (get-doublereg cpu 28))	
		(<= 96 (get-doublereg cpu 30)))
	   (equal
	    (get-carry-bit (run-add32-loop cpu))
	    (u8-carried-+-carry-bit 
	     (get-reg cpu (get-doublereg cpu 26))
	     (get-reg cpu (get-doublereg cpu 28))
	     (get-carry-bit cpu))))
  :hints (("Goal"
	   :expand (:free (n c) (cpu-n-step n c)))))

(defun countdown (x)
  (if (zp x)
      nil
    (countdown (- x 1))))

(defun iterate-add32-loop (cpu n)
  (if (zp n)
      cpu
    (iterate-add32-loop (run-add32-loop cpu) (- n 1))))

(defun amplify-carry (bit pow)
  (if bit
      (expt 256 pow)
    0))

(defthm add-step
  (implies (and (has-prog-mems *add-32-inner-loop* cpu (get-pc cpu))
        
		(natp iter)
	        
		(<= 96 (get-doublereg cpu 26))	
		(<= 96 (get-doublereg cpu 28))	
		(<= 96 (get-doublereg cpu 30))
		(not (get-carry-bit cpu))


		)
	   (equal 
		  (+ (read-le-nat (iterate-add32-loop cpu iter)
				  (get-doublereg cpu 30)
				  iter)
		     (amplify-carry (get-carry-bit (iterate-add32-loop cpu iter)) iter))

		  (+ (read-le-nat cpu
				  (get-doublereg cpu 26)
				  iter)
		     (read-le-nat cpu
				  (get-doublereg cpu 28)
				  iter))))
  :hints (("Goal" :in-theory (disable get-carry-bit run-add32-loop
				      has-prog-mems amplify-carry)
	   :induct (countdown iter)
	 
	   :do-not-induct t
	   :do-not '(generalize))))
	  
	   


  :hints (("Goal"
	   :expand (:free (n c) (cpu-n-step n c)))))

(defthm add-32-inner-loop-sum
  (implies (and (has-prog-mems *add-32-inner-loop* cpu (get-pc cpu))
		(natp x-base) (<= 96 x-base) (<= x-base 150)
		(natp y-base) (<= 96 y-base) (<= y-base 150)
		(natp z-base) (<= 200 z-base)
		(natp iter) (<= iter 32)
		(equal (get-doublereg cpu 26) (+ x-base iter))
		(equal (get-doublereg cpu 28) (+ y-base iter))
		(equal (get-doublereg cpu 30) (+ z-base iter))

		(<= 96 (get-doublereg cpu 26)) ; These are redundant, but speed up
		(<= 96 (get-doublereg cpu 28)) ; the theorem proving a lot... 
		(<= 96 (get-doublereg cpu 30)) ; Consider removing them later.
		
		(< 0 (get-reg cpu 16))
		(<= (get-reg cpu 16) 128)
		(natp (get-pc cpu))
		
		(equal (+ (read-le-nat cpu x-base iter)
			  (read-le-nat cpu y-base iter))
		       (+ (read-le-nat cpu z-base iter)
			  (if (get-carry-bit cpu)
			      (expt 256 (1+ iter))
			    0)))
		)
	   (equal (+ (read-le-nat cpu x-base (1+ iter))
		     (read-le-nat cpu y-base (1+ iter)))
		  (+ (read-le-nat (run-add32-loop cpu) z-base (1+ iter))
		     (if (get-carry-bit (run-add32-loop cpu))
			 (expt 256 (+ 2 iter))
		       0))))
	   ;(equal (get-pc (run-add32-loop cpu))
	;	  (get-pc cpu)))
  :hints (("Goal"
	   :in-theory (disable read-le-nat)
	   :expand (:free (n c) (cpu-n-step n c)))))
